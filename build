#!/usr/bin/env python
from __future__ import print_function

import json
import tempfile
import shutil
import os
import subprocess


def call(command, cwd=None):
    if not isinstance(command, list):
        command = command.split(' ')
    subprocess.check_call(command, cwd=cwd)


def download(url, dest, checksum):
    pass


def read_config():
    filename = os.path.join(os.path.dirname(__file__), "config.json")
    with open(filename) as f:
        return json.load(f)


def modify_env(usr):
    paths = {
        'PATH': 'bin',
        'LD_LIBRARY_PATH': 'lib',
        'LIBRARY_PATH': 'lib',
        'CPATH': 'include',
        'C_INCLUDE_PATH': 'include',
        'CPLUS_INCLUDE_PATH': 'include',
        'OBJC_INCLUDE_PATH': 'include'
    }
    for varname, path in paths.items():
        var = os.environ.get(varname, "")
        new_path = os.path.join(usr, path)
        os.environ.putenv(':'.join(new_path, var))


def build_openms_contrib(usr):
    tmp = tempfile.mkdtemp()
    try:
        src = download("", tmp, "")
        call(["cmake", ".", "PREFIX=%s" % usr], src)
        call("make", src)
        call("make install", src)
    finally:
        shutil.rmtree(tmp)


def build_openms(usr):
    tmp = tempfile.mkdtemp()
    try:
        src = download("", tmp, "")
        call(["cmake", ".", "PREFIX=%s" % usr], src)
        call("make", src)
        call("make install", src)
    finally:
        shutil.rmtree(tmp)


def build_tpp(usr):
    tmp = tempfile.mkdtemp()
    try:
        src = download("", tmp, "")
        src = os.path.join(src, "src")
        with open(os.path.join(src, "Makefile.config.incl"), "w") as f:
            print("", file=f)
        call("make", src)
        call("make install", src)
    finally:
        shutil.rmtree(tmp)


def build_env(usr):
    env = os.path.join(usr, "env")
    call(["conda",  "install", "-p", env, "python", "pip"])


def build_all(config):
    usr = config['usr']
    build_env(usr)
    build_openms_contrib(usr)
    build_openms(usr)
    build_tpp(usr)


def main():
    config = read_config()
    if 'usr' not in config:
        raise KeyError("config.json does not contain 'usr'")
    modify_env(config['usr'])
    build_all(config)


if __name__ == '__main__':
    main()
